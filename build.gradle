plugins {
    id 'java-library'
    id 'jvm-test-suite'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'signing'
    id 'maven-publish'
    id 'org.sonarqube' version '5.0.0.4638'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'com.github.ben-manes.versions' version '0.51.0'
}

group 'org.itsallcode'
version = '0.7.0'

dependencies {
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(getPropertyWithDefault('javaVersion', '17'))
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = true
    options.addBooleanOption('html5', true)
    options.addStringOption('Xwerror', '-quiet')
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Werror'
    options.encoding = 'UTF-8'
}

testing {
    suites {
        configureEach {
            useJUnitJupiter('5.10.1')
            dependencies {
                implementation project()
                implementation libs.assertj
                runtimeOnly libs.slf4jLogger
            }
            targets {
                all {
                    testTask.configure {
                        if(logger.infoEnabled) {
                            testLogging.showStandardStreams = true
                        }
                        jvmArgs '-enableassertions'
                        systemProperty 'java.util.logging.config.file', file('src/test/resources/logging.properties')
                    }
                }
            }
        }
        test {
            dependencies {
                implementation libs.h2
                implementation libs.mockitoJunit
                implementation libs.tostringverifier
                implementation libs.equalsverifier
            }
        }
        integrationTest(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            dependencies {
                implementation libs.exasolTestcontainers
                runtimeOnly libs.exasolJdbc
            }
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

sonar {
  properties {
    property("sonar.organization", "itsallcode")
    property("sonar.host.url", "https://sonarcloud.io")
  }
}

rootProject.tasks['sonar'].dependsOn(tasks['testCodeCoverageReport'], tasks['integrationTestCodeCoverageReport'])

def getPropertyWithDefault(String name, String defaultValue) {
    if(project.hasProperty(name)) {
        def value = project.property(name)
        logger.info("Found value '${value}' for project property '${name}'")
        return value
    }
    logger.info("Project property '${name}' not defined, using default '${defaultValue}'")
    return defaultValue
}

def getOptionalProperty(String name) {
    if(project.hasProperty(name)) {
        return project.property(name)
    }
    logger.info("Project property '${name}' not available. Please it to ~/.gradle/gradle.properties")
    return null
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Simple JDBC API'
                description = 'Library to simplify using JDBC'
                url = 'https://github.com/itsallcode/simple-jdbc'

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kaklakariada'
                        name = 'Christoph'
                        email = 'kaklakariada@chp1.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/itsallcode/simple-jdbc.git'
                    developerConnection = 'scm:git:https://github.com/itsallcode/simple-jdbc.git'
                    url = 'https://github.com/itsallcode/simple-jdbc'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = false
            credentials(PasswordCredentials) {
                username = getOptionalProperty("ossrhUsername")
                password = getOptionalProperty("ossrhPassword")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = project.group
    repositories {
        sonatype {
            stagingProfileId = "546ea6ce74787e"
            username = getOptionalProperty("ossrhUsername")
            password = getOptionalProperty("ossrhPassword")
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
