plugins {
    id 'java-library'
    id 'jvm-test-suite'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'signing'
    id 'maven-publish'
    id 'org.sonarqube' version '5.1.0.4882'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'com.github.ben-manes.versions' version '0.51.0'
}

group 'org.itsallcode'
version = '0.7.1'

dependencies {
}

java {
    toolchain {
        def javaVersion = project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : 17
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = true
    options.addBooleanOption('html5', true)
    options.addStringOption('Xwerror', '-quiet')
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.compilerArgs << '-Werror'
    options.encoding = 'UTF-8'
}

testing {
    suites {
        configureEach {
            useJUnitJupiter()
            dependencies {
                implementation project()
                implementation libs.assertj
                runtimeOnly libs.slf4jLogger
            }
            targets {
                all {
                    testTask.configure {
                        if(logger.infoEnabled) {
                            testLogging.showStandardStreams = true
                        }
                        jvmArgs '-enableassertions'
                        systemProperty 'java.util.logging.config.file', file('src/test/resources/logging.properties')
                    }
                }
            }
        }
        test {
            dependencies {
                implementation libs.h2
                implementation libs.mockitoJunit
                implementation libs.tostringverifier
                implementation libs.equalsverifier
            }
        }
        integrationTest(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            dependencies {
                implementation libs.exasolTestcontainers
                runtimeOnly libs.exasolJdbc
            }
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    finalizedBy jacocoTestReport
}

sonar {
  properties {
    property("sonar.organization", "itsallcode")
    property("sonar.host.url", "https://sonarcloud.io")
  }
}

rootProject.tasks['sonar'].dependsOn(tasks['testCodeCoverageReport'], tasks['integrationTestCodeCoverageReport'])

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Simple JDBC API'
                description = 'Library to simplify using JDBC'
                url = 'https://github.com/itsallcode/simple-jdbc'

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kaklakariada'
                        name = 'Christoph'
                        email = 'kaklakariada@chp1.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/itsallcode/simple-jdbc.git'
                    developerConnection = 'scm:git:https://github.com/itsallcode/simple-jdbc.git'
                    url = 'https://github.com/itsallcode/simple-jdbc'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = project.group
    repositories {
        sonatype {
            stagingProfileId = "546ea6ce74787e"
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    gradleReleaseChannel = "current"
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
